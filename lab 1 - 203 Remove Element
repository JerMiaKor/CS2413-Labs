//Code for 203. Remove Linked List Elements
//Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

#include<stdio.h>
#include<stdlib.h>

/*
struct ListNode {
    int val;
    struct ListNode *next;
};
*/

struct ListNode* removeElements(struct ListNode* head, int val) {
    struct ListNode filler; // added to make a filling value to start off (fixes issues where even the head needs removal)
    filler.next = head; // fil -> to start
    struct ListNode* prev = &filler; // added for recognizing remaining nodes after values are removed

    while(head) { // traverse
        if(head->val == val) { // if = val, then...
            struct ListNode* temp = head;  // Store deleting value (for memory)
            head = head->next;  // skip ahead 
            free(temp);  // Free the removed node (stop memory issues)
            continue;  // move out to keep removed nodes out
        }
        prev->next = head; //goto new valid
        prev = head;
        head = head->next; // go until end
    }
    prev->next = NULL; //terminate list to end memory

    return filler.next;//send
}
