typedef struct {
    int* s1;
    int* s2; //s - stacks
    int t1, t2, cap; //t - tops, cap is capacity

} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* obj = (MyQueue*)malloc(sizeof(MyQueue));
    if (obj == NULL) {
        return NULL;
    }
    obj->cap = 100;
    obj->s1 = (int*)malloc(obj->cap * sizeof(int));
    obj->s2 = (int*)malloc(obj->cap * sizeof(int));
    if (obj->s1 == NULL || obj->s2 == NULL) {
        free(obj->s1);
        free(obj->s2);
        free(obj);
        return NULL;
    }
    obj->t1 = -1;
    obj->t2 = -1;
    return obj;
}

bool myQueueEmpty(MyQueue* obj) {
    return obj->t1 == -1 && obj->t2 == -1;
} //moved bool up

void myQueuePush(MyQueue* obj, int x) {
    if (obj->t1 == obj->cap - 1) {
        return;
    }
    obj->s1[++obj->t1] = x;
}

int myQueuePop(MyQueue* obj) {
    if (myQueueEmpty(obj)) {
        return -1;
    }
    if (obj->t2 == -1) {
        while (obj->t1 != -1) {
            obj->s2[++obj->t2] = obj->s1[obj->t1--];
        }
    }
    return obj->s2[obj->t2--];
}

int myQueuePeek(MyQueue* obj) {
    if (myQueueEmpty(obj)) {
        return -1;
    }
    if (obj->t2 == -1) {
        while (obj->t1 != -1) {
            obj->s2[++obj->t2] = obj->s1[obj->t1--];
        }
    }
    return obj->s2[obj->t2];
}


void myQueueFree(MyQueue* obj) {
    if (obj) {
        free(obj->s1);
        free(obj->s2);
        free(obj);
    }
}
